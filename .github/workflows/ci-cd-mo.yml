name: ci cd of springpetclinic
on:
  workflow_dispatch: 
    inputs:
      environment:
        description: "choose environment"
        required: true
        default: "staging"
jobs:
    spring-petclinic-CI-CD:
      runs-on: ubuntu-latest

      steps:
        - name: checkout code
          uses: actions/checkout@v5.0.0
        - name: setup java jdk
          uses: actions/setup-java@v5.0.0
          with:
            java-version: 17
            distribution: temurin
        - name: build code using maven and skipping tests
          run:  mvn clean install -DskipTests    
        - name: SonarQube Static Code Analysis
          run: |
            mvn clean install sonar:sonar -DskipTests \
              -Dsonar.projectKey=mofayad96_spring-petclinic \
              -Dsonar.organization=mofayad96 \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        - name: Docker Setup Buildx 
          uses: docker/setup-buildx-action@v3.11.1

        - name: Docker Login
          uses: docker/login-action@v3.5.0
          with:
            username: ${{secrets.DOCKER_USERNAME}} 
            password: ${{secrets.DOCKER_PASS}}
        - name: Build and push Docker images
          uses: docker/build-push-action@v6.18.0
          with: 
            context: .
            file: Dockerfile.multistage
            push: true
            tags:  deaddeal96/spring-petclinic-githubactions:latest
        - name: Notify Slack
          uses: slackapi/slack-github-action@v1.27.0
          with:
            payload: |
              {
                "text": " Build finished for *${{ github.repository }}* on branch *${{ github.ref_name }}* \nStatus: ${{ job.status }}"
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        - name: terraform 
          uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1    
        
        - name: terraform init
          working-directory: terraform
          run : terraform init
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        - name: terraform plan 
          working-directory: terraform
          run : terraform plan
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        - name: terraform apply
          working-directory: terraform
          run: terraform apply --auto-approve
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        - name: aws credntials
          uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838
          with:
            aws-region: eu-central-1
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        - name: Get EC2 instance ID
          id: get_instance
          run: |
            INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=Spring-petclinic_app" "Name=instance-state-name,Values=running" \
              --query "Reservations[0].Instances[0].InstanceId" \
              --output text)
            echo "INSTANCE_ID=${INSTANCE_ID}" | tr -d '\n' >> $GITHUB_ENV
        
        - name: Notify Slack
          uses: slackapi/slack-github-action@v1.27.0
          with:
            payload: |
                      {
                        "text": " Your instance now works and it's id is ${{ env.INSTANCE_ID }} "
                      }
          env:
              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        - name: Wait for 1 minute
          run: |
                echo "Waiting for 1 minute to ensure instance is fully ready..."
                sleep 60
                echo "Wait completed"

        - name: download docker on EC2
          run: |
              CMD_ID=$(aws ssm send-command \
                --targets "Key=instanceIds,Values=$INSTANCE_ID" \
                --document-name "AWS-RunShellScript" \
                --parameters 'commands=[
                  "sudo apt-get update -y",
                  "sudo apt-get install -y ca-certificates curl gnupg",
                  "sudo install -m 0755 -d /etc/apt/keyrings",
                  "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg",
                  "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null",
                  "sudo apt-get update -y",
                  "sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin",
                  "sudo systemctl enable docker",
                  "sudo systemctl start docker"
                ]' \
                --query "Command.CommandId" --output text)

              echo "Sent command $CMD_ID, waiting for it to finish..."

              # Wait for completion
              aws ssm wait command-executed --command-id $CMD_ID --instance-id $INSTANCE_ID

              # Show the output
              aws ssm list-command-invocations \
                --command-id $CMD_ID \
                --instance-id $INSTANCE_ID \
                --details
        - name: Pull image and start container
          run: |

            CMD_ID=$(aws ssm send-command \
              --targets "Key=instanceIds,Values=$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=[
                "sudo docker container run -d --name web -p 8080:8080 deaddeal96/spring-petclinic-githubactions:latest"
              ]' \
              --query "Command.CommandId" --output text)

            echo "Sent container run command $CMD_ID, waiting for it to finish..."

            aws ssm wait command-executed --command-id $CMD_ID --instance-id $INSTANCE_ID

            aws ssm list-command-invocations --command-id $CMD_ID --instance-id $INSTANCE_ID --details

        - name: Get EC2 public IP
          run: |
            echo "PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=Spring-petclinic_app" "Name=instance-state-name,Values=running" \
              --query "Reservations[0].Instances[0].PublicIpAddress" --output text)" >> $GITHUB_ENV

        - name: Notify Slack
          uses: slackapi/slack-github-action@v1.27.0
          with:
            payload: |
                      {
                        "text": " Your app now works on ip ${{ env.PUBLIC_IP }} "
                      }
          env:
              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

            
